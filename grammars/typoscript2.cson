'name': 'TypoScript2'

'scopeName': 'source.typoscript2'

'fileTypes': [ 'ts2', 'fusion' ]

'patterns': [{ 'include': '#statement' }]

'repository':
  'statement':
    'patterns': [
      { 'include': '#line-comment' }
      { 'include': '#block-comment' }
      { 'include': '#block-statement' }
      { 'include': '#afx-assignment' }
      { 'include': '#css-assignment' }
      { 'include': '#multiline-value-assignment' }
      { 'include': '#line-statement' }
    ]

  'line-comment':
    'match': '^\\s*(?:#|//)[\\s\\S]*$'
    'name': 'comment.line'

  'block-comment':
    'begin': '^\\s*/\\*'
    'end': '\\s*\\*/\\s*$'
    'name': 'comment.block'

  'afx-assignment':
    'begin': '^\\s*(\\S+)\\s*(=)\\s*afx`([\\s\\S]*)$'
    'beginCaptures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': 'source.js' }]
    'end': '^([\\s\\S]*)\\`$'
    'endCaptures':
      '1': 'patterns': [{ 'include': 'source.js' }]
    'patterns': [{ 'include': 'source.js' }]

  'css-assignment':
    'begin': '^\\s*(\\S+)\\s*(=)\\s*css`([\\s\\S]*)$'
    'beginCaptures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': 'source.css.styled' }]
    'end': '^([\\s\\S]*)\\`$'
    'endCaptures':
      '1': 'patterns': [{ 'include': 'source.css.styled' }]
    'patterns': [{ 'include': 'source.css.styled' }]

  'multiline-value-assignment':
    'patterns': [
      { 'include': '#single-quoted-string-assignment' }
      { 'include': '#double-quoted-string-assignment' }
      { 'include': '#multiline-eel-expression-assignment' }
    ]

  'single-quoted-string-assignment':
    'name': 'string.quoted.single'
    'begin': '^\\s*(\\S+)\\s*(=)\\s*([\\\'][^\\\']*)$'
    'beginCaptures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'name': 'string.quoted.single'
    'end': '^(\\s*[\\s\\S]*[\\\'])\\s*$'
    'endCaptures':
      '1': 'name': 'string.quoted.single'

  'double-quoted-string-assignment':
    'name': 'string.quoted.double'
    'begin': '^\\s*(\\S+)\\s*(=)\\s*("[^"]*)$'
    'beginCaptures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'name': 'string.quoted.double'
    'end': '^(\\s*[\\s\\S]*")\\s*$'
    'endCaptures':
      '1': 'name': 'string.quoted.double'

  'multiline-eel-expression-assignment':
    'begin': '^\\s*(\\S+)\\s*(=)\\s*\\$\\{([^\\}]*)$'
    'beginCaptures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': 'source.js' }]
    'end': '}$'
    'endCaptures':
      '1': 'patterns': [{ 'include': 'source.js' }]
    'patterns': [{ 'include': 'source.js' }]

  'line-statement':
    'match': '^\\s*(\\S(?:\\s*\\S)*)\\s*$'
    'name': 'meta.line-statement'
    'captures': '1': 'patterns': [
      { 'include': '#namespace-statement' }
      { 'include': '#include-statement' }
      { 'include': '#value-assignment' }
      { 'include': '#reset-statement' }
      { 'include': '#object-inheritance' }
      { 'include': '#prototype-inheritance'}
      { 'include': '#invalid-expression' }
    ]

  'block-statement':
    'begin': '^\\s*(\\S(?:\\s*\\S)*)\\s*\\{\\s*$'
    'name': 'meta.block-statement'
    'end': '^\\s*\\}\\s*$'
    'beginCaptures':
      '1': 'patterns': [
        { 'include': '#object-assignment' }
        { 'include': '#object-inheritance' }
        { 'include': '#prototype-inheritance' }
        { 'include': '#path' }
        { 'include': '#invalid-expression' }
      ]
    'patterns': [{ 'include': '#statement' }]

  'namespace-statement':
    'match': '^\\s*(namespace:)\\s*(\\w+)\\s*(=)\\s*(\\w(?:\\.?\\w)*)\\s*$'
    'name': 'meta.namespace-statement'
    'captures':
      '1': 'name': 'keyword.other'
      '2': 'name': 'entity.name.type.class'
      '3': 'name': 'keyword.operator'
      '4': 'name': 'entity.name.type.class'

  'include-statement':
    'match': '^\\s*(include:)\\s*(\\S+)\\s*$'
    'name': 'meta.include-statement'
    'captures':
      '1': 'name': 'keyword.other'
      '2': 'name': 'string.unquoted'

  'object-assignment':
    'match': '^(\\S+)\\s*(=)\\s*(\\S+)$'
    'name': 'meta.assignment'
    'captures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': '#assigned-object' }]

  'assigned-object':
    'match': '^([\\s\\S]*)$'
    'name': 'assigned-value'
    'captures': '1': 'patterns': [
      { 'include': '#prototype-name' }
      { 'include': '#invalid-expression' }
    ]

  'value-assignment':
    'match': '^(\\S+)\\s*(=)\\s*(\\S[\\s\\S]*)$'
    'name': 'meta.assignment'
    'captures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': '#assigned-value' }]

  'assigned-value':
    'match': '^([\\s\\S]*)$'
    'name': 'assigned-value'
    'captures':
      '1': 'patterns': [
        { 'include': '#string-literal' }
        { 'include': '#numeric-literal' }
        { 'include': '#boolean-literal' }
        { 'include': '#prototype-name' }
        { 'include': '#eel-expression' }
        { 'include': '#invalid-expression'}
      ]

  'string-literal':
    'match': '^([\\\'][\\s\\S]*[\\\'])|("[\\s\\S]*")$'
    'captures':
      '1': 'name': 'string.quoted.single'
      '2': 'name': 'string.quoted.double'

  'numeric-literal':
    'match': '^\\d+(?:\\.\\d+)?$'
    'name': 'constant.numeric'

  'boolean-literal':
    'match': '^(?:[tT][rR][uU][eE])|(?:[fF][aA][lL][sS][eE])$'
    'name': 'constant.language'

  'prototype-inheritance':
    'match': '^(\\S+)\\s*(<)\\s*(\\S+)$'
    'captures':
      '1': 'patterns': [{ 'include': '#prototype' }]
      '2': 'name': 'keyword.operator'
      '3': 'patterns': [{ 'include': '#prototype' }]

  'object-inheritance':
    'match': '^(\\S+?\\.)?(\\w+)\\s*(<)\\s*(\\S+?\\.)?(\\w+)$'
    'captures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'patterns': [{ 'include': '#property' }]
      '3': 'name': 'keyword.operator'
      '4': 'patterns': [{ 'include': '#path' }]
      '5': 'patterns': [{ 'include': '#property' }]

  'reset-statement':
    'match': '^(\\S+)\\s*(>)$'
    'captures':
      '1': 'patterns': [{ 'include': '#path' }]
      '2': 'name': 'keyword.operator'

  'path':
    'match': '^(\\S+?)(?:\\.(?![^\\(]+\\))(\\S+))?$'
    'captures':
      '1': 'patterns': [
        { 'include': '#prototype'}
        { 'include': '#property' }
        { 'include': '#invalid-expression' }
      ]
      '2': 'patterns': [{ 'include': '#path' }]

  'property':
    'match': '^([\\s\\S]*)$'
    'captures': '1': 'patterns': [
      { 'include': '#property-name' }
      { 'include': '#invalid-expression' }
    ]

  'property-name':
    'match': '^(\\w(?:[-:]*\\w)*)$|^(@\\w(?:[-:]*\\w)*)$'
    'captures':
      '1': 'name': 'variable'
      '2': 'name': 'support.variable'

  'prototype':
    'match': '^(prototype)\\(([^\\(]+)\\)$'
    'captures':
      '1': 'name': 'keyword.other'
      '2': 'patterns': [
        { 'include': '#prototype-name' }
        { 'include': '#invalid-expression' }
      ]

  # though it seems prototype-names may be any string matching ^[\\w\\.:]+$
  # enforce colons/dots to be preceded/followed by a wording char
  'prototype-name':
    'match': '^\\w(?:(?:\\.|:)?\\w)*$'
    'name': 'entity.name.type.class'

  'eel-expression':
    'begin': '^\\$\\{'
    'end': '\\}$'
    'captures': '0': 'name': 'meta.eel-expression'
    'patterns': [{ 'include': 'source.js' }]

  'invalid-expression':
    'match': '^[\\s\\S]*$'
    'name': 'invalid.illegal'
